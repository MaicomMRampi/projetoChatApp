// passportConfig.js

const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcrypt');
const UsuariosSchema = require('../models/usuario');
console.log("chegou no pass")
// Configura√ß√£o da estrat√©gia local
passport.use(
    new LocalStrategy(
        { usernameField: 'username', passwordField: 'senha' },
        async (username, senha, done) => {
            try {
                const user = await UsuariosSchema.findOne({ username });
                if (!user) {
                    return done(null, false, { message: 'Usu√°rio n√£o encontrado' });
                }
                const senhaValida = await bcrypt.compare(senha, user.senha);
                if (!senhaValida) {
                    return done(null, false, { message: 'Senha inv√°lida' });
                }
                return done(null, user); // Login bem-sucedido
            } catch (error) {
                console.log("üöÄ ~ error", error)
                return done(error);
            }
        }
    )
);

// Serializa√ß√£o do usu√°rio para a sess√£o
passport.serializeUser((user, done) => {
    done(null, user.id); // Apenas o ID √© armazenado na sess√£o
});

// Desserializa√ß√£o do usu√°rio a partir da sess√£o
passport.deserializeUser(async (id, done) => {
    try {
        const user = await UsuariosSchema.findById(id); // Encontra o usu√°rio usando o ID armazenado na sess√£o
        done(null, user); // Passa o usu√°rio completo para a sess√£o
    } catch (error) {
        done(error, null); // Caso ocorra um erro, chama done com null

    }
});

module.exports = passport;
